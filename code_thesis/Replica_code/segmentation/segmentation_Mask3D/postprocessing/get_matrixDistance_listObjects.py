# environment: sceneGraphs_groundTruth_Replica (yes, the name could have been changed)

'''To retrieve the the segmentation in a scene from the Replica dataset starting from the files generated by LabelMaker.
This code creates three files:
- matrix_distances_file_LabelMaker.txt (in the filename the distance that has been used is specified)
- associations_objectIdIndex_LabelMaker.json (keys are objectIDs, values are the indexes in the distance matrix)
- list_instances_LabelMaker.txt.

Also saves the point cloud with an header similar to this one:


'''

# Had to use in the terminal: export PYTHONNOUSERSITE=True # maybe no

from plyfile import PlyData, PlyElement
import numpy as np
import os
import open3d as o3d
import json
import time

from side_code.side_code import * # local file


start_time = time.time()

#
# Variables to set
#

frl_apartment = 'frl_apartment_0'
path_folderResults = '/local/home/gmarsich/Desktop/data_Replica' # if the folder does not exist, it will be created
chosen_distance = distance_Euclidean_closest_points # be aware that with distance_Euclidean_closest_points a downsampling will be performed
scaling_factor = 50 # for downsampling to perform distance_Euclidean_closest_points

# path_to_output_ply = '/local/home/gmarsich/data2TB/DATASETS/Replica/frl_apartment_0/habitat/Segmentation/mesh_semantic.ply_47.ply' # instance to visualise as a test


#
# Automatic variables, in theory they are ok like this
#

path_mask3d_folder = os.path.join(path_folderResults, frl_apartment, 'scannet200_mask3d_1')

path_save_files = os.path.join(path_folderResults, frl_apartment)
path_pred_mask = os.path.join(path_mask3d_folder, 'pred_mask')
path_predictions = os.path.join(path_mask3d_folder, 'predictions.txt')
path_mesh = os.path.join(path_mask3d_folder, 'mesh_labelled.ply')

current_dir = os.path.dirname(os.path.abspath(__file__))
scannet_file = os.path.join(current_dir, 'scannet200_constants.py')



#
# Create list_idScene_pcd
#

dict_paths_predMask = {int(os.path.splitext(file)[0]): os.path.join(path_pred_mask, file) 
                       for file in sorted(os.listdir(path_pred_mask)) 
                       if os.path.isfile(os.path.join(path_pred_mask, file))}


dict_IDscene_IDscannet = {}

with open(path_predictions, 'r') as file:
    for line in file:
        parts = line.strip().split()
        
        filename = parts[0]  # this contains the path
        IDscene = int(os.path.splitext(os.path.basename(filename))[0])  # extract IDscene from filename
        IDscannet = int(parts[1])  # the integer that follows the filename

        dict_IDscene_IDscannet[IDscene] = IDscannet


mesh = o3d.io.read_point_cloud(path_mesh)
points = np.asarray(mesh.points)
colors = np.asarray(mesh.colors)

for key, value in dict_paths_predMask:
    






#
# Create a list list_info where each element id in the form [obj_id_scene, object_id_scannet, label, pcd]
#



    



# end_time = time.time()
# elapsed_time = end_time - start_time
# print(f"Elapsed time: {elapsed_time:.6f} seconds")
